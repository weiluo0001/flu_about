{"version":3,"sources":["ForecastView.bmp","logo.svg","style.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wholeViewStyle","height","width","App","className","style","Navbar","expand","variant","bg","Container","Brand","Nav","Link","href","active","src","forecast","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,0C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,gICA9BC,EAAiB,CAC5BC,OAAQ,OACRC,MAAO,Q,sCC8FMC,MAxFf,WACE,OACE,yBAAKC,UAAU,YAAYC,MAAOL,GAChC,kBAACM,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQC,GAAG,SACvC,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAOK,MAAR,sBACE,kBAACC,EAAA,EAAD,CAAKR,UAAU,UAAUI,QAAQ,QAC/B,kBAACI,EAAA,EAAIC,KAAL,CAAUC,KAAK,gDAAf,iBACA,kBAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,0CAA0CC,QAAM,GAA/D,YAIR,0CACQ,uBAAGX,UAAU,aAAb,iLAKA,6CAGA,uBAAGA,UAAU,aAAb,0cAQA,yBAAKY,IAAKC,IAAUf,MAAM,MAAMD,OAAO,MAAMG,UAAU,QAAQc,IAAI,mCACzE,4CACA,uBAAGd,UAAU,aAAb,oHAGA,uBAAGA,UAAU,aAAb,wJAGA,uBAAGA,UAAU,aAAb,4OAGA,uBAAGA,UAAU,aAAb,oMAGA,uBAAGA,UAAU,aAAb,0OAGA,uBAAGA,UAAU,aAAb,+WAGA,uBAAGA,UAAU,aAAb,iSAGA,uBAAGA,UAAU,aAAb,+PAGA,uBAAGA,UAAU,aAAb,2NAGA,uBAAGA,UAAU,aAAb,wRAGA,uBAAGA,UAAU,aAAb,qOAGA,uBAAGA,UAAU,aAAb,8MAGA,uBAAGA,UAAU,aAAb,uPAGA,uBAAGA,UAAU,aAAb,wRAGA,uBAAGA,UAAU,aAAb,iTAGA,uBAAGA,UAAU,aAAb,0NAGA,uBAAGA,UAAU,aAAb,2PC3EYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e529b66d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ForecastView.2fc2d107.bmp\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const wholeViewStyle = {\r\n  height: '100%',\r\n  width: '100%'\r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport forecast from './ForecastView.bmp';\nimport {wholeViewStyle} from './style';\nimport './App.css';\nimport {Navbar,Container,Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"wholeView\" style={wholeViewStyle}>\n      <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n      <Container>\n          <Navbar.Brand>Flu Trend Viz</Navbar.Brand>\n            <Nav className=\"mr-auto\" variant=\"tabs\">\n              <Nav.Link href=\"https://weiluo0001.github.io/flu_prediction/\">Forecast View</Nav.Link>\n              <Nav.Link href=\"https://weiluo0001.github.io/flu-about/\" active>About</Nav.Link>\n            </Nav>\n        </Container>\n      </Navbar>\n      <h2> Overview </h2>\n              <p className=\"paragraph\">\n              Flu Trend Viz is a visual analytics platform used to explore\n              flu incidence and prediction over space and time. Currently, one\n              view has been implemented in the system. It is:  \n              </p>\n              <h5>\n              Forecast View\n              </h5>\n              <p className=\"paragraph\">\n              This view shows flu incidence for different states in the US. Users \n              can click on each hexagon on the map to update the other two views \n              for each specific state. Users can mouse over the timeline at the bottom\n              to check the 2 week prediction based on our predictive models. The heatmap view on the top left shows the list of \n              states which is experience high risk of flu incidence. The heatmap \n              view will change accordingly while users mouse over the timeline.   \n              </p>\n              <img src={forecast} width=\"50%\" height=\"50%\" className=\"image\" alt=\"Global Dengue Timing/Wave View\"/>        \n        <h2> References </h2>\n        <p className=\"reference\">\n        1. C. Viboud and M. Santillana. Fitbit-informed influenza forecasts. Lancet Digital Health. Vol 2. Issue 2. 2020  \n        </p>\n        <p className=\"reference\">\n        2. E. L. Aiken, A. T. Nguyen, M. Santillana Towards the Use of Neural Networks for Influenza Prediction at Multiple Spatial Resolutions. arXiv. 2019  \n        </p>\n        <p className=\"reference\">\n        3. C. Poirier, Y. Hswen, G. Bouzille, M. Cuggia, A. Lavenu, J. S. Brownstein, T. Brewer, M. Santillana Influenza forecasting for the French regions by using EHR, web and climatic data sources with an ensemble approach. MedRxiv. 2019  \n        </p>\n        <p className=\"reference\">\n        4. Clemente LC, Lu F, Santillana M. Improved real-time influenza surveillance using Internet search data in eight Latin American countries. JMIR Public Health Surveillance. 2019;5 (2) :e12214.  \n        </p>\n        <p className=\"reference\">\n        5.  Lu F, Hattab M, Clemente L, Santillana M. Improved state-level influenza activity nowcasting in the United States leveraging Internet-based data sources and network approaches via ARGONet. Nature Communications. 2019;10 (147).  \n        </p>\n        <p className=\"reference\">\n        6.  Baltrusaitis K, Brownstein JS, Scarpino SV, Bakota E, Crawley A, Biggerstaff M, Conidi G, Gunn J, Gray J, Zink A, ..., Santillana M. Comparison of crowd-sourced, electronic health records based, and traditional health-care based influenza-tracking systems at multiple spatial resolutions in the United States of America. BMC Infectious Diseases. 2018;18 (403)  \n        </p>\n        <p className=\"reference\">\n        7.  Lu F, Hou S, Baltrusaitis K, Shah M, Leskovec J, Sosic R, Hawkins J, Brownstein JS, Conidi G, Gunn J, ..., Santillana M. Accurate influenza monitoring and forecasting in the Boston metropolis using novel Internet data streams. Journal of Medical Internet Research. 2018;4 (1) :e4.7\n        </p>\n        <p className=\"reference\">\n        8.  Marathe A, Brownstein JS, Chu S, Marathe MV, Nguyen AT, Paolotti D, Perra N, Perrotta D, Santillana M, Swarup S, et al. Combining Participatory Influenza Surveillance with Modeling and Forecasting. JMIR Public Health Surveillance . 2017;3 (4) :e83\n        </p>\n        <p className=\"reference\">\n        9.  S. Yang, M. Santillana, J.S. Brownstein, J. Gray, S. Richardson, S. C Kou. Using electronic health records and Internet search information for accurate influenza forecasting. BMC Infectious Diseases 2017; 17:332\n        </p>\n        <p className=\"reference\">\n        10.  K. Baltrusaitis, M. Santillana, A. Crawley, R. Chunara, M. Smolinski, J. Brownstein. Determinants of Participants' Follow-Up and Characterization of Representativeness in Flu Near You, A Participatory Disease Surveillance. JMIR Public Health Surveillance. 2017;3 (3) :e18 \n        </p>\n        <p className=\"reference\">\n        11.   M. Santillana, A.T. Nguyen, T. Louie, A. Zink, J. Gray, I. Sung, and J.S. Brownstein. Cloud-based Electronic Health Records for Real-time, Region-specific Influenza Surveillance. Scientific Reports 6, 25732 (2016) (PDF) \n        </p>\n        <p className=\"reference\">\n        12.   S. Yang, M. Santillana, and S. C. Kou. Accurate estimation of influenza epidemics using Google search data via ARGO. Proceedings of the National Academy of Sciences, 112.47, pp: 14473-14478, 2015. \n        </p>\n        <p className=\"reference\">\n        13.   M. Santillana, A. T. Nguyen, M. Dredze, M.J. Paul, E. Nsoesie, and J. S. Brownstein. Combining Search, Social Media, and Traditional Data Sources to Improve Influenza Surveillance. PLOS Computational Biology. 11(10): e1004513, Oct, 2015. \n        </p>\n        <p className=\"reference\">\n        14.   M. S. Smolinski, A. W. Crawley, K. Baltrusaitis, R. Chunara, J. M. Olsen, O. Wojick, M. Santillana, A. T. Nguyen, J. S. Brownstein. Flu Near You: Crowdsourced Symptom Reporting Spanning Two Influenza Seasons. American Journal of Public Health. 105 (10), 2124-2130, 2015.  \n        </p>\n        <p className=\"reference\">\n        15.   R. Nagar, Q. Yuan, C. Freifeld, M. Santillana, A. Nojima, R. Chunara, and J. S. Brownstein. A Case Study of the New York City 2012-2013 Influenza Season with Daily, Geocoded Twitter Data from Temporal and Spatiotemporal Perspectives. Journal of Medical Internet Research, 16(10): e236, Nov 2014. \n        </p>\n        <p className=\"reference\">\n        16.   M. Santillana, E. O. Nsoesie, S. R. Mekaru, D. Scales, and J. S. Brownstein. Using Clinician’s Search Query Data to Monitor Influenza Epidemics. Clinical Infectious Diseases, 59 (10), pp:1446-1450, 2014. \n        </p>\n        <p className=\"reference\">\n        17.    M. Santillana, D.W. Zhang, B.M. Althouse, and J.W. Ayers. What Can Digital Disease Detection Learn from (an External Revision to) Google Flu Trends?. American Journal of Preventive Medicine. Volume 47, Issue 3, pp: 341–347, Sep 2014.\n        </p>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}